// This file was auto-generated by Fern from our API Definition.

package basic

import (
	context "context"
	generatedgo "go-mod-path/generated/go"
	core "go-mod-path/generated/go/core"
	option "go-mod-path/generated/go/option"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: core.NewCaller(
			&core.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Read an Object identified by `{contactId}`. `{contactId}` refers to the internal object ID. Control what is returned via the `properties` query param.
func (c *Client) GetCrmV3ObjectsContactsContactIdGetById(
	ctx context.Context,
	contactId string,
	request *generatedgo.GetCrmV3ObjectsContactsContactIdGetByIdRequest,
	opts ...option.RequestOption,
) (*generatedgo.SimplePublicObjectWithAssociations, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.hubapi.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/crm/v3/objects/contacts/%v", contactId)

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *generatedgo.SimplePublicObjectWithAssociations
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Move an Object identified by `{contactId}` to the recycling bin.
func (c *Client) DeleteCrmV3ObjectsContactsContactIdArchive(
	ctx context.Context,
	contactId string,
	opts ...option.RequestOption,
) error {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.hubapi.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/crm/v3/objects/contacts/%v", contactId)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodDelete,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
		},
	); err != nil {
		return err
	}
	return nil
}

// Perform a partial update of an Object identified by `{contactId}`. `{contactId}` refers to the internal object ID. Provided property values will be overwritten. Read-only and non-existent properties will be ignored. Properties values can be cleared by passing an empty string.
func (c *Client) PatchCrmV3ObjectsContactsContactIdUpdate(
	ctx context.Context,
	contactId string,
	request *generatedgo.SimplePublicObjectInput,
	opts ...option.RequestOption,
) (*generatedgo.SimplePublicObject, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.hubapi.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/crm/v3/objects/contacts/%v", contactId)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *generatedgo.SimplePublicObject
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPatch,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Read a page of contacts. Control what is returned via the `properties` query param.
func (c *Client) GetCrmV3ObjectsContactsGetPage(
	ctx context.Context,
	request *generatedgo.GetCrmV3ObjectsContactsGetPageRequest,
	opts ...option.RequestOption,
) (*generatedgo.CollectionResponseSimplePublicObjectWithAssociationsForwardPaging, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.hubapi.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/crm/v3/objects/contacts"

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *generatedgo.CollectionResponseSimplePublicObjectWithAssociationsForwardPaging
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Create a contact with the given properties and return a copy of the object, including the ID. Documentation and examples for creating standard contacts is provided.
func (c *Client) PostCrmV3ObjectsContactsCreate(
	ctx context.Context,
	request *generatedgo.SimplePublicObjectInputForCreate,
	opts ...option.RequestOption,
) (*generatedgo.SimplePublicObject, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.hubapi.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/crm/v3/objects/contacts"

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *generatedgo.SimplePublicObject
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPost,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
