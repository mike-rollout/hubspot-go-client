// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "go-mod-path/generated/go/core"
	time "time"
)

type AssociatedId struct {
	Id   string `json:"id" url:"id"`
	Type string `json:"type" url:"type"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AssociatedId) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AssociatedId) UnmarshalJSON(data []byte) error {
	type unmarshaler AssociatedId
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AssociatedId(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AssociatedId) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AssociationSpec struct {
	AssociationCategory AssociationSpecAssociationCategory `json:"associationCategory" url:"associationCategory"`
	AssociationTypeId   int                                `json:"associationTypeId" url:"associationTypeId"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AssociationSpec) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AssociationSpec) UnmarshalJSON(data []byte) error {
	type unmarshaler AssociationSpec
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AssociationSpec(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AssociationSpec) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AssociationSpecAssociationCategory string

const (
	AssociationSpecAssociationCategoryHubspotDefined    AssociationSpecAssociationCategory = "HUBSPOT_DEFINED"
	AssociationSpecAssociationCategoryUserDefined       AssociationSpecAssociationCategory = "USER_DEFINED"
	AssociationSpecAssociationCategoryIntegratorDefined AssociationSpecAssociationCategory = "INTEGRATOR_DEFINED"
)

func NewAssociationSpecAssociationCategoryFromString(s string) (AssociationSpecAssociationCategory, error) {
	switch s {
	case "HUBSPOT_DEFINED":
		return AssociationSpecAssociationCategoryHubspotDefined, nil
	case "USER_DEFINED":
		return AssociationSpecAssociationCategoryUserDefined, nil
	case "INTEGRATOR_DEFINED":
		return AssociationSpecAssociationCategoryIntegratorDefined, nil
	}
	var t AssociationSpecAssociationCategory
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AssociationSpecAssociationCategory) Ptr() *AssociationSpecAssociationCategory {
	return &a
}

type BatchResponseSimplePublicObject struct {
	CompletedAt time.Time                             `json:"completedAt" url:"completedAt"`
	RequestedAt *time.Time                            `json:"requestedAt,omitempty" url:"requestedAt,omitempty"`
	StartedAt   time.Time                             `json:"startedAt" url:"startedAt"`
	Links       map[string]string                     `json:"links,omitempty" url:"links,omitempty"`
	Results     []*SimplePublicObject                 `json:"results,omitempty" url:"results,omitempty"`
	Status      BatchResponseSimplePublicObjectStatus `json:"status" url:"status"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BatchResponseSimplePublicObject) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BatchResponseSimplePublicObject) UnmarshalJSON(data []byte) error {
	type embed BatchResponseSimplePublicObject
	var unmarshaler = struct {
		embed
		CompletedAt *core.DateTime `json:"completedAt"`
		RequestedAt *core.DateTime `json:"requestedAt,omitempty"`
		StartedAt   *core.DateTime `json:"startedAt"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = BatchResponseSimplePublicObject(unmarshaler.embed)
	b.CompletedAt = unmarshaler.CompletedAt.Time()
	b.RequestedAt = unmarshaler.RequestedAt.TimePtr()
	b.StartedAt = unmarshaler.StartedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BatchResponseSimplePublicObject) MarshalJSON() ([]byte, error) {
	type embed BatchResponseSimplePublicObject
	var marshaler = struct {
		embed
		CompletedAt *core.DateTime `json:"completedAt"`
		RequestedAt *core.DateTime `json:"requestedAt,omitempty"`
		StartedAt   *core.DateTime `json:"startedAt"`
	}{
		embed:       embed(*b),
		CompletedAt: core.NewDateTime(b.CompletedAt),
		RequestedAt: core.NewOptionalDateTime(b.RequestedAt),
		StartedAt:   core.NewDateTime(b.StartedAt),
	}
	return json.Marshal(marshaler)
}

func (b *BatchResponseSimplePublicObject) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BatchResponseSimplePublicObjectStatus string

const (
	BatchResponseSimplePublicObjectStatusPending    BatchResponseSimplePublicObjectStatus = "PENDING"
	BatchResponseSimplePublicObjectStatusProcessing BatchResponseSimplePublicObjectStatus = "PROCESSING"
	BatchResponseSimplePublicObjectStatusCanceled   BatchResponseSimplePublicObjectStatus = "CANCELED"
	BatchResponseSimplePublicObjectStatusComplete   BatchResponseSimplePublicObjectStatus = "COMPLETE"
)

func NewBatchResponseSimplePublicObjectStatusFromString(s string) (BatchResponseSimplePublicObjectStatus, error) {
	switch s {
	case "PENDING":
		return BatchResponseSimplePublicObjectStatusPending, nil
	case "PROCESSING":
		return BatchResponseSimplePublicObjectStatusProcessing, nil
	case "CANCELED":
		return BatchResponseSimplePublicObjectStatusCanceled, nil
	case "COMPLETE":
		return BatchResponseSimplePublicObjectStatusComplete, nil
	}
	var t BatchResponseSimplePublicObjectStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (b BatchResponseSimplePublicObjectStatus) Ptr() *BatchResponseSimplePublicObjectStatus {
	return &b
}

type BatchResponseSimplePublicObjectWithErrors struct {
	CompletedAt time.Time                                       `json:"completedAt" url:"completedAt"`
	NumErrors   *int                                            `json:"numErrors,omitempty" url:"numErrors,omitempty"`
	RequestedAt *time.Time                                      `json:"requestedAt,omitempty" url:"requestedAt,omitempty"`
	StartedAt   time.Time                                       `json:"startedAt" url:"startedAt"`
	Links       map[string]string                               `json:"links,omitempty" url:"links,omitempty"`
	Results     []*SimplePublicObject                           `json:"results,omitempty" url:"results,omitempty"`
	Errors      []*StandardError                                `json:"errors,omitempty" url:"errors,omitempty"`
	Status      BatchResponseSimplePublicObjectWithErrorsStatus `json:"status" url:"status"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BatchResponseSimplePublicObjectWithErrors) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BatchResponseSimplePublicObjectWithErrors) UnmarshalJSON(data []byte) error {
	type embed BatchResponseSimplePublicObjectWithErrors
	var unmarshaler = struct {
		embed
		CompletedAt *core.DateTime `json:"completedAt"`
		RequestedAt *core.DateTime `json:"requestedAt,omitempty"`
		StartedAt   *core.DateTime `json:"startedAt"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = BatchResponseSimplePublicObjectWithErrors(unmarshaler.embed)
	b.CompletedAt = unmarshaler.CompletedAt.Time()
	b.RequestedAt = unmarshaler.RequestedAt.TimePtr()
	b.StartedAt = unmarshaler.StartedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BatchResponseSimplePublicObjectWithErrors) MarshalJSON() ([]byte, error) {
	type embed BatchResponseSimplePublicObjectWithErrors
	var marshaler = struct {
		embed
		CompletedAt *core.DateTime `json:"completedAt"`
		RequestedAt *core.DateTime `json:"requestedAt,omitempty"`
		StartedAt   *core.DateTime `json:"startedAt"`
	}{
		embed:       embed(*b),
		CompletedAt: core.NewDateTime(b.CompletedAt),
		RequestedAt: core.NewOptionalDateTime(b.RequestedAt),
		StartedAt:   core.NewDateTime(b.StartedAt),
	}
	return json.Marshal(marshaler)
}

func (b *BatchResponseSimplePublicObjectWithErrors) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BatchResponseSimplePublicObjectWithErrorsStatus string

const (
	BatchResponseSimplePublicObjectWithErrorsStatusPending    BatchResponseSimplePublicObjectWithErrorsStatus = "PENDING"
	BatchResponseSimplePublicObjectWithErrorsStatusProcessing BatchResponseSimplePublicObjectWithErrorsStatus = "PROCESSING"
	BatchResponseSimplePublicObjectWithErrorsStatusCanceled   BatchResponseSimplePublicObjectWithErrorsStatus = "CANCELED"
	BatchResponseSimplePublicObjectWithErrorsStatusComplete   BatchResponseSimplePublicObjectWithErrorsStatus = "COMPLETE"
)

func NewBatchResponseSimplePublicObjectWithErrorsStatusFromString(s string) (BatchResponseSimplePublicObjectWithErrorsStatus, error) {
	switch s {
	case "PENDING":
		return BatchResponseSimplePublicObjectWithErrorsStatusPending, nil
	case "PROCESSING":
		return BatchResponseSimplePublicObjectWithErrorsStatusProcessing, nil
	case "CANCELED":
		return BatchResponseSimplePublicObjectWithErrorsStatusCanceled, nil
	case "COMPLETE":
		return BatchResponseSimplePublicObjectWithErrorsStatusComplete, nil
	}
	var t BatchResponseSimplePublicObjectWithErrorsStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (b BatchResponseSimplePublicObjectWithErrorsStatus) Ptr() *BatchResponseSimplePublicObjectWithErrorsStatus {
	return &b
}

type CollectionResponseAssociatedId struct {
	Paging  *Paging         `json:"paging,omitempty" url:"paging,omitempty"`
	Results []*AssociatedId `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CollectionResponseAssociatedId) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CollectionResponseAssociatedId) UnmarshalJSON(data []byte) error {
	type unmarshaler CollectionResponseAssociatedId
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CollectionResponseAssociatedId(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CollectionResponseAssociatedId) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CollectionResponseSimplePublicObjectWithAssociationsForwardPaging struct {
	Paging  *ForwardPaging                        `json:"paging,omitempty" url:"paging,omitempty"`
	Results []*SimplePublicObjectWithAssociations `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CollectionResponseSimplePublicObjectWithAssociationsForwardPaging) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CollectionResponseSimplePublicObjectWithAssociationsForwardPaging) UnmarshalJSON(data []byte) error {
	type unmarshaler CollectionResponseSimplePublicObjectWithAssociationsForwardPaging
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CollectionResponseSimplePublicObjectWithAssociationsForwardPaging(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CollectionResponseSimplePublicObjectWithAssociationsForwardPaging) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CollectionResponseWithTotalSimplePublicObjectForwardPaging struct {
	Total   int                   `json:"total" url:"total"`
	Paging  *ForwardPaging        `json:"paging,omitempty" url:"paging,omitempty"`
	Results []*SimplePublicObject `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CollectionResponseWithTotalSimplePublicObjectForwardPaging) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CollectionResponseWithTotalSimplePublicObjectForwardPaging) UnmarshalJSON(data []byte) error {
	type unmarshaler CollectionResponseWithTotalSimplePublicObjectForwardPaging
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CollectionResponseWithTotalSimplePublicObjectForwardPaging(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CollectionResponseWithTotalSimplePublicObjectForwardPaging) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type Error struct {
	// A specific category that contains more specific detail about the error
	SubCategory *string `json:"subCategory,omitempty" url:"subCategory,omitempty"`
	// Context about the error condition
	Context map[string][]string `json:"context,omitempty" url:"context,omitempty"`
	// A unique identifier for the request. Include this value with any error reports or support tickets
	CorrelationId string `json:"correlationId" url:"correlationId"`
	// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
	Links map[string]string `json:"links,omitempty" url:"links,omitempty"`
	// A human readable message describing the error along with remediation steps where appropriate
	Message string `json:"message" url:"message"`
	// The error category
	Category string `json:"category" url:"category"`
	// further information about the error
	Errors []*ErrorDetail `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *Error) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *Error) UnmarshalJSON(data []byte) error {
	type unmarshaler Error
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = Error(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *Error) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ErrorDetail struct {
	// A specific category that contains more specific detail about the error
	SubCategory *string `json:"subCategory,omitempty" url:"subCategory,omitempty"`
	// The status code associated with the error detail
	Code *string `json:"code,omitempty" url:"code,omitempty"`
	// The name of the field or parameter in which the error was found.
	In *string `json:"in,omitempty" url:"in,omitempty"`
	// Context about the error condition
	Context map[string][]string `json:"context,omitempty" url:"context,omitempty"`
	// A human readable message describing the error along with remediation steps where appropriate
	Message string `json:"message" url:"message"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ErrorDetail) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ErrorDetail) UnmarshalJSON(data []byte) error {
	type unmarshaler ErrorDetail
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ErrorDetail(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ErrorDetail) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type Filter struct {
	HighValue    *string  `json:"highValue,omitempty" url:"highValue,omitempty"`
	PropertyName string   `json:"propertyName" url:"propertyName"`
	Values       []string `json:"values,omitempty" url:"values,omitempty"`
	Value        *string  `json:"value,omitempty" url:"value,omitempty"`
	// null
	Operator FilterOperator `json:"operator" url:"operator"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *Filter) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *Filter) UnmarshalJSON(data []byte) error {
	type unmarshaler Filter
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = Filter(value)

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *Filter) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FilterGroup struct {
	Filters []*Filter `json:"filters,omitempty" url:"filters,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FilterGroup) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FilterGroup) UnmarshalJSON(data []byte) error {
	type unmarshaler FilterGroup
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FilterGroup(value)

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FilterGroup) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// null
type FilterOperator string

const (
	FilterOperatorEq               FilterOperator = "EQ"
	FilterOperatorNeq              FilterOperator = "NEQ"
	FilterOperatorLt               FilterOperator = "LT"
	FilterOperatorLte              FilterOperator = "LTE"
	FilterOperatorGt               FilterOperator = "GT"
	FilterOperatorGte              FilterOperator = "GTE"
	FilterOperatorBetween          FilterOperator = "BETWEEN"
	FilterOperatorIn               FilterOperator = "IN"
	FilterOperatorNotIn            FilterOperator = "NOT_IN"
	FilterOperatorHasProperty      FilterOperator = "HAS_PROPERTY"
	FilterOperatorNotHasProperty   FilterOperator = "NOT_HAS_PROPERTY"
	FilterOperatorContainsToken    FilterOperator = "CONTAINS_TOKEN"
	FilterOperatorNotContainsToken FilterOperator = "NOT_CONTAINS_TOKEN"
)

func NewFilterOperatorFromString(s string) (FilterOperator, error) {
	switch s {
	case "EQ":
		return FilterOperatorEq, nil
	case "NEQ":
		return FilterOperatorNeq, nil
	case "LT":
		return FilterOperatorLt, nil
	case "LTE":
		return FilterOperatorLte, nil
	case "GT":
		return FilterOperatorGt, nil
	case "GTE":
		return FilterOperatorGte, nil
	case "BETWEEN":
		return FilterOperatorBetween, nil
	case "IN":
		return FilterOperatorIn, nil
	case "NOT_IN":
		return FilterOperatorNotIn, nil
	case "HAS_PROPERTY":
		return FilterOperatorHasProperty, nil
	case "NOT_HAS_PROPERTY":
		return FilterOperatorNotHasProperty, nil
	case "CONTAINS_TOKEN":
		return FilterOperatorContainsToken, nil
	case "NOT_CONTAINS_TOKEN":
		return FilterOperatorNotContainsToken, nil
	}
	var t FilterOperator
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FilterOperator) Ptr() *FilterOperator {
	return &f
}

type ForwardPaging struct {
	Next *NextPage `json:"next,omitempty" url:"next,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *ForwardPaging) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *ForwardPaging) UnmarshalJSON(data []byte) error {
	type unmarshaler ForwardPaging
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = ForwardPaging(value)

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *ForwardPaging) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type NextPage struct {
	Link  *string `json:"link,omitempty" url:"link,omitempty"`
	After string  `json:"after" url:"after"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NextPage) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NextPage) UnmarshalJSON(data []byte) error {
	type unmarshaler NextPage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NextPage(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NextPage) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type OauthScope string

const (
	// Quotes
	OauthScopeCrmObjectsQuotesWrite OauthScope = "crm.objects.quotes.write"
	OauthScopeCrmObjectsDealsRead   OauthScope = "crm.objects.deals.read"
	// Line Items
	OauthScopeCrmObjectsLineItemsRead OauthScope = "crm.objects.line_items.read"
	OauthScopeCrmObjectsDealsWrite    OauthScope = "crm.objects.deals.write"
	// Quotes
	OauthScopeCrmObjectsQuotesRead OauthScope = "crm.objects.quotes.read"
	// Line Items
	OauthScopeCrmObjectsLineItemsWrite OauthScope = "crm.objects.line_items.write"
	OauthScopeCrmObjectsCompaniesRead  OauthScope = "crm.objects.companies.read"
	OauthScopeCrmObjectsCompaniesWrite OauthScope = "crm.objects.companies.write"
	OauthScopeCrmObjectsContactsWrite  OauthScope = "crm.objects.contacts.write"
	OauthScopeCrmObjectsContactsRead   OauthScope = "crm.objects.contacts.read"
)

func NewOauthScopeFromString(s string) (OauthScope, error) {
	switch s {
	case "crm.objects.quotes.write":
		return OauthScopeCrmObjectsQuotesWrite, nil
	case "crm.objects.deals.read":
		return OauthScopeCrmObjectsDealsRead, nil
	case "crm.objects.line_items.read":
		return OauthScopeCrmObjectsLineItemsRead, nil
	case "crm.objects.deals.write":
		return OauthScopeCrmObjectsDealsWrite, nil
	case "crm.objects.quotes.read":
		return OauthScopeCrmObjectsQuotesRead, nil
	case "crm.objects.line_items.write":
		return OauthScopeCrmObjectsLineItemsWrite, nil
	case "crm.objects.companies.read":
		return OauthScopeCrmObjectsCompaniesRead, nil
	case "crm.objects.companies.write":
		return OauthScopeCrmObjectsCompaniesWrite, nil
	case "crm.objects.contacts.write":
		return OauthScopeCrmObjectsContactsWrite, nil
	case "crm.objects.contacts.read":
		return OauthScopeCrmObjectsContactsRead, nil
	}
	var t OauthScope
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (o OauthScope) Ptr() *OauthScope {
	return &o
}

type Paging struct {
	Next *NextPage     `json:"next,omitempty" url:"next,omitempty"`
	Prev *PreviousPage `json:"prev,omitempty" url:"prev,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *Paging) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *Paging) UnmarshalJSON(data []byte) error {
	type unmarshaler Paging
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = Paging(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *Paging) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PreviousPage struct {
	Before string  `json:"before" url:"before"`
	Link   *string `json:"link,omitempty" url:"link,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PreviousPage) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PreviousPage) UnmarshalJSON(data []byte) error {
	type unmarshaler PreviousPage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PreviousPage(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PreviousPage) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PublicAssociationsForObject struct {
	Types []*AssociationSpec `json:"types,omitempty" url:"types,omitempty"`
	To    *PublicObjectId    `json:"to,omitempty" url:"to,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PublicAssociationsForObject) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PublicAssociationsForObject) UnmarshalJSON(data []byte) error {
	type unmarshaler PublicAssociationsForObject
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PublicAssociationsForObject(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PublicAssociationsForObject) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PublicObjectId struct {
	Id string `json:"id" url:"id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PublicObjectId) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PublicObjectId) UnmarshalJSON(data []byte) error {
	type unmarshaler PublicObjectId
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PublicObjectId(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PublicObjectId) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type SimplePublicObject struct {
	CreatedAt             time.Time                        `json:"createdAt" url:"createdAt"`
	Archived              *bool                            `json:"archived,omitempty" url:"archived,omitempty"`
	ArchivedAt            *time.Time                       `json:"archivedAt,omitempty" url:"archivedAt,omitempty"`
	PropertiesWithHistory map[string][]*ValueWithTimestamp `json:"propertiesWithHistory,omitempty" url:"propertiesWithHistory,omitempty"`
	Id                    string                           `json:"id" url:"id"`
	Properties            map[string]*string               `json:"properties,omitempty" url:"properties,omitempty"`
	UpdatedAt             time.Time                        `json:"updatedAt" url:"updatedAt"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SimplePublicObject) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SimplePublicObject) UnmarshalJSON(data []byte) error {
	type embed SimplePublicObject
	var unmarshaler = struct {
		embed
		CreatedAt  *core.DateTime `json:"createdAt"`
		ArchivedAt *core.DateTime `json:"archivedAt,omitempty"`
		UpdatedAt  *core.DateTime `json:"updatedAt"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SimplePublicObject(unmarshaler.embed)
	s.CreatedAt = unmarshaler.CreatedAt.Time()
	s.ArchivedAt = unmarshaler.ArchivedAt.TimePtr()
	s.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SimplePublicObject) MarshalJSON() ([]byte, error) {
	type embed SimplePublicObject
	var marshaler = struct {
		embed
		CreatedAt  *core.DateTime `json:"createdAt"`
		ArchivedAt *core.DateTime `json:"archivedAt,omitempty"`
		UpdatedAt  *core.DateTime `json:"updatedAt"`
	}{
		embed:      embed(*s),
		CreatedAt:  core.NewDateTime(s.CreatedAt),
		ArchivedAt: core.NewOptionalDateTime(s.ArchivedAt),
		UpdatedAt:  core.NewDateTime(s.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (s *SimplePublicObject) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SimplePublicObjectBatchInput struct {
	IdProperty *string           `json:"idProperty,omitempty" url:"idProperty,omitempty"`
	Id         string            `json:"id" url:"id"`
	Properties map[string]string `json:"properties,omitempty" url:"properties,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SimplePublicObjectBatchInput) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SimplePublicObjectBatchInput) UnmarshalJSON(data []byte) error {
	type unmarshaler SimplePublicObjectBatchInput
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SimplePublicObjectBatchInput(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SimplePublicObjectBatchInput) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SimplePublicObjectId struct {
	Id string `json:"id" url:"id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SimplePublicObjectId) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SimplePublicObjectId) UnmarshalJSON(data []byte) error {
	type unmarshaler SimplePublicObjectId
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SimplePublicObjectId(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SimplePublicObjectId) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SimplePublicObjectInputForCreate struct {
	Associations []*PublicAssociationsForObject `json:"associations,omitempty" url:"associations,omitempty"`
	Properties   map[string]string              `json:"properties,omitempty" url:"properties,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SimplePublicObjectInputForCreate) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SimplePublicObjectInputForCreate) UnmarshalJSON(data []byte) error {
	type unmarshaler SimplePublicObjectInputForCreate
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SimplePublicObjectInputForCreate(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SimplePublicObjectInputForCreate) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SimplePublicObjectWithAssociations struct {
	Associations          map[string]*CollectionResponseAssociatedId `json:"associations,omitempty" url:"associations,omitempty"`
	CreatedAt             time.Time                                  `json:"createdAt" url:"createdAt"`
	Archived              *bool                                      `json:"archived,omitempty" url:"archived,omitempty"`
	ArchivedAt            *time.Time                                 `json:"archivedAt,omitempty" url:"archivedAt,omitempty"`
	PropertiesWithHistory map[string][]*ValueWithTimestamp           `json:"propertiesWithHistory,omitempty" url:"propertiesWithHistory,omitempty"`
	Id                    string                                     `json:"id" url:"id"`
	Properties            map[string]*string                         `json:"properties,omitempty" url:"properties,omitempty"`
	UpdatedAt             time.Time                                  `json:"updatedAt" url:"updatedAt"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SimplePublicObjectWithAssociations) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SimplePublicObjectWithAssociations) UnmarshalJSON(data []byte) error {
	type embed SimplePublicObjectWithAssociations
	var unmarshaler = struct {
		embed
		CreatedAt  *core.DateTime `json:"createdAt"`
		ArchivedAt *core.DateTime `json:"archivedAt,omitempty"`
		UpdatedAt  *core.DateTime `json:"updatedAt"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SimplePublicObjectWithAssociations(unmarshaler.embed)
	s.CreatedAt = unmarshaler.CreatedAt.Time()
	s.ArchivedAt = unmarshaler.ArchivedAt.TimePtr()
	s.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SimplePublicObjectWithAssociations) MarshalJSON() ([]byte, error) {
	type embed SimplePublicObjectWithAssociations
	var marshaler = struct {
		embed
		CreatedAt  *core.DateTime `json:"createdAt"`
		ArchivedAt *core.DateTime `json:"archivedAt,omitempty"`
		UpdatedAt  *core.DateTime `json:"updatedAt"`
	}{
		embed:      embed(*s),
		CreatedAt:  core.NewDateTime(s.CreatedAt),
		ArchivedAt: core.NewOptionalDateTime(s.ArchivedAt),
		UpdatedAt:  core.NewDateTime(s.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (s *SimplePublicObjectWithAssociations) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type StandardError struct {
	SubCategory *StandardErrorSubCategory `json:"subCategory,omitempty" url:"subCategory,omitempty"`
	Context     map[string][]string       `json:"context,omitempty" url:"context,omitempty"`
	Links       map[string]string         `json:"links,omitempty" url:"links,omitempty"`
	Id          *string                   `json:"id,omitempty" url:"id,omitempty"`
	Category    string                    `json:"category" url:"category"`
	Message     string                    `json:"message" url:"message"`
	Errors      []*ErrorDetail            `json:"errors,omitempty" url:"errors,omitempty"`
	Status      string                    `json:"status" url:"status"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *StandardError) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StandardError) UnmarshalJSON(data []byte) error {
	type unmarshaler StandardError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StandardError(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StandardError) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type StandardErrorSubCategory struct {
	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *StandardErrorSubCategory) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StandardErrorSubCategory) UnmarshalJSON(data []byte) error {
	type unmarshaler StandardErrorSubCategory
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StandardErrorSubCategory(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StandardErrorSubCategory) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type ValueWithTimestamp struct {
	SourceId        *string   `json:"sourceId,omitempty" url:"sourceId,omitempty"`
	SourceType      string    `json:"sourceType" url:"sourceType"`
	SourceLabel     *string   `json:"sourceLabel,omitempty" url:"sourceLabel,omitempty"`
	UpdatedByUserId *int      `json:"updatedByUserId,omitempty" url:"updatedByUserId,omitempty"`
	Value           string    `json:"value" url:"value"`
	Timestamp       time.Time `json:"timestamp" url:"timestamp"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (v *ValueWithTimestamp) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *ValueWithTimestamp) UnmarshalJSON(data []byte) error {
	type embed ValueWithTimestamp
	var unmarshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
	}{
		embed: embed(*v),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*v = ValueWithTimestamp(unmarshaler.embed)
	v.Timestamp = unmarshaler.Timestamp.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties

	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *ValueWithTimestamp) MarshalJSON() ([]byte, error) {
	type embed ValueWithTimestamp
	var marshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp"`
	}{
		embed:     embed(*v),
		Timestamp: core.NewDateTime(v.Timestamp),
	}
	return json.Marshal(marshaler)
}

func (v *ValueWithTimestamp) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}
